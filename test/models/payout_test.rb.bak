require 'test_helper'

class PayoutTest < ActiveSupport::TestCase
  setup do
    @payout_shares = shares( :payout1, :payout2, :payout3, :payout4, :payout5 )
    @accounts = [accounts(:pool)]
  end

  test "it should initialize with hash of attributes" do
    payout = Payout.new( our_fees: 2 * 10**8, users_amount: 10**9 )

    assert_equal 2 * 10**8, payout.our_fees
    assert_equal 10**9, payout.users_amount
  end

  test "it should call add input and output to tx" do
    Transaction.any_instance.expects(:add_input).times( @accounts.size )
    Transaction.any_instance.expects(:add_output).times( @payout_shares.size )
    payout = Payout.new( @accounts, @payout_shares )

    # Fees
    total = @accounts.map(&:balance).sum
    assert_equal total * Payout::MINER_FEES, payout.miner_fees
    assert_equal total * Payout::OUR_FEES, payout.our_fees
    assert_equal total - payout.miner_fees - payout.our_fees, payout.users_amount
  end

  test "it should add empty shares" do
    @accounts.first.stubs(listunspent: [@tx_8a10])
    payout = Payout.new( @accounts, [] )
    assert_equal [], payout.shares
  end

  test "it should add shares" do
    skip
    shares = @payout_shares[0...2]
    @accounts.first.stubs(listunspent: [@tx_8a10])
    Account.any_instance.stubs(balance: 0)
    payout = Payout.new( @accounts, [] )
    payout.add_shares( shares )
    assert_equal shares, payout.shares
    
    assert_equal 3, payout.outputs.size
    assert_equal @payout_hash[:our_fees], payout.our_fees
    assert_equal @payout_hash[:users_amount], payout.users_amount

    assert_equal @payout_hash[:our_fees], payout.outputs[accounts(:fees).address]
    assert_equal @payout_hash[:users_amount] / 2, payout.outputs[shares[0].user.btc_address]
    assert_equal @payout_hash[:users_amount] / 2, payout.outputs[shares[1].user.btc_address]
  end

  test "it should add shares from initialize" do
    skip
    shares = @payout_shares[0...3]
    @accounts.first.stubs(listunspent: [@tx_8a10])
    Account.any_instance.stubs(balance: 10**8)
    payout = Payout.new( @accounts, shares )
    assert_equal shares, payout.shares

    assert_equal shares, payout.shares
    assert_equal 4, payout.outputs.size
    assert_equal @payout_hash[:our_fees], payout.our_fees
    assert_equal @payout_hash[:users_amount], payout.users_amount

    assert_equal @payout_hash[:our_fees], payout.outputs[accounts(:fees).address]
    assert_equal 10**8, payout.outputs[accounts(:balances).address]
    assert_equal @payout_hash[:users_amount] * 0.75, payout.outputs[shares[0].user.btc_address]
    assert_equal @payout_hash[:users_amount] * 0.25, payout.outputs[shares[1].user.btc_address]
  end

  test "it should initialize all" do
    skip
    @accounts.first.stubs(listunspent: [@tx_8a10], balance: 5*10**8)
    Account.any_instance.stubs(balance: 0)
    payout = Payout.new( @accounts, shares(:payout1, :payout2, :payout3) )

    assert_equal @payout_hash, payout.to_h
  end
end
